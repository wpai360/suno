<?php

namespace App\Jobs;

use App\Models\Order;
use App\Services\GoogleDriveService;
use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Foundation\Bus\Dispatchable;
use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Queue\SerializesModels;
use Illuminate\Support\Facades\Log;

class UploadToGDriveJob implements ShouldQueue
{
    use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;

    protected $order;
    protected $fileUrl;

    public function __construct(Order $order, $fileUrl)
    {
        $this->order = $order;
        $this->fileUrl = $fileUrl;
    }

    public function handle(GoogleDriveService $driveService)
    {
        try {
            // Refresh the order model to get the latest data
            $this->order->refresh();

            Log::info('Starting Google Drive upload', [
                'order_id' => $this->order->id,
                'file_url' => $this->fileUrl
            ]);

            // Download the file if it's a URL
            // We should be uploading the video file generated by ConvertMp3ToMp4Job
            // Let's use the video_file path from the refreshed order
            if (!$this->order->video_file) {
                throw new \Exception('No video file found for Google Drive upload');
            }
            
            $filePathToUpload = $this->order->video_file;

            // Upload to Google Drive
            $driveLink = $driveService->upload($filePathToUpload, true, '1z-hsLq_BzwOuc4xBJL6VNvVkLtLB5chn'); // true for video, folder ID for videos

            // Update order with Drive link
            $this->order->update([
                'drive_link' => $driveLink,
                'status' => 'drive_uploaded'
            ]);

            Log::info('Google Drive upload completed successfully', [
                'order_id' => $this->order->id,
                'drive_link' => $driveLink
            ]);

            // Clean up temp file (if it was a temp file path)
            // This cleanup will be handled by a separate job at the end of the chain
            /*
            if (file_exists($filePathToUpload)) {
                // We only delete temp files created during conversion
                // Assuming convertToMp4 creates temp files in storage_path('app/public/temp')
                $tempDir = storage_path('app/public/temp');
                if (str_starts_with($filePathToUpload, $tempDir)) {
                     unlink($filePathToUpload);
                }
            }
            */

        } catch (\Exception $e) {
            Log::error('Google Drive upload failed', [
                'order_id' => $this->order->id,
                'error' => $e->getMessage()
            ]);
            
            $this->order->update(['status' => 'failed']);
            throw $e;
        }
    }
}
